#!/bin/bash

if [ "$EUID" != "0" ]; then
  echo "You must be root to run this script."
  exit 1
fi

SCRIPT_NAME="rftest2"
LXCDIR=/var/lib/lxc
MONGODB_CONF=/etc/mongodb.conf
MONGODB_PORT=27017
CONTROLLER_PORT=6633
RF_HOME=..
export PATH=$PATH:/usr/local/bin:/usr/local/sbin
export PYTHONPATH=$PYTHONPATH:$RF_HOME

cd $RF_HOME

wait_port_listen() {
    port=$1
    while ! `nc -z localhost $port` ; do
        echo -n .
        sleep 1
    done
}

echo_bold() {
    echo -e "\033[1m${1}\033[0m"
}

kill_process_tree() {
    top=$1
    pid=$2

    children=`ps -o pid --no-headers --ppid ${pid}`

    for child in $children
    do
        kill_process_tree 0 $child
    done

    if [ $top -eq 0 ]; then
        kill -9 $pid &> /dev/null
    fi
}

reset() {
    init=$1;
    if [ $init -eq 1 ]; then
        echo_bold "-> Starting $SCRIPT_NAME";
    else
        echo_bold "-> Stopping child processes...";
        kill_process_tree 1 $$
    fi

    ovs-vsctl del-br dp0 &> /dev/null;
    #ovs-vsctl del-br switchA &> /dev/null;
    #ovs-vsctl del-br switchB &> /dev/null;
    #ovs-vsctl del-br switchC &> /dev/null;
    #ovs-vsctl del-br switchD &> /dev/null;
    ovs-vsctl emer-reset &> /dev/null;

    #echo_bold "-> Stopping and resetting LXC VMs...";
    lxc-shutdown -n rfvmA;
    lxc-shutdown -n rfvmB;
    lxc-shutdown -n rfvmC;
    lxc-shutdown -n rfvmD;

	#lxc-shutdown -n h1;
	#lxc-shutdown -n h2;
	#lxc-shutdown -n h3;
	#lxc-shutdown -n h4;

    lxc-stop -n rfvmA;
    lxc-stop -n rfvmB;
    lxc-stop -n rfvmC;
    lxc-stop -n rfvmD;

	#lxc-stop -n h1;
	#lxc-stop -n h2;
	#lxc-stop -n h3;
	#lxc-stop -n h4;

    echo_bold "-> Deleting (previous) run data...";
    mongo db --eval "
        db.getCollection('rftable').drop(); 
        db.getCollection('rfconfig').drop(); 
        db.getCollection('rfstats').drop(); 
        db.getCollection('rfclient<->rfserver').drop(); 
        db.getCollection('rfserver<->rfproxy').drop();
    "
        
    rm -rf /var/lib/lxc/rfvmA/rootfs/opt/rfclient;
    rm -rf /var/lib/lxc/rfvmB/rootfs/opt/rfclient;
    rm -rf /var/lib/lxc/rfvmC/rootfs/opt/rfclient;
    rm -rf /var/lib/lxc/rfvmD/rootfs/opt/rfclient;
}
reset 1
trap "reset 0; exit 0" INT

echo_bold "-> Setting up the management bridge (lxcbr0)..."
ifconfig lxcbr0 192.169.1.1 up

echo_bold "-> Setting up MongoDB..."
sed -i "/bind_ip/c\bind_ip = 127.0.0.1,192.169.1.1" $MONGODB_CONF
service mongodb restart
wait_port_listen $MONGODB_PORT

echo_bold "-> Configuring the virtual machines..."
# Create the rfclient dir
mkdir /var/lib/lxc/rfvmA/rootfs/opt/rfclient
mkdir /var/lib/lxc/rfvmB/rootfs/opt/rfclient
mkdir /var/lib/lxc/rfvmC/rootfs/opt/rfclient
mkdir /var/lib/lxc/rfvmD/rootfs/opt/rfclient

make rfclient

# Copy the rfclient executable
cp build/rfclient /var/lib/lxc/rfvmA/rootfs/opt/rfclient/rfclient
cp build/rfclient /var/lib/lxc/rfvmB/rootfs/opt/rfclient/rfclient
cp build/rfclient /var/lib/lxc/rfvmC/rootfs/opt/rfclient/rfclient
cp build/rfclient /var/lib/lxc/rfvmD/rootfs/opt/rfclient/rfclient

# We sleep for a few seconds to wait for the interfaces to go up
echo "#!/bin/sh" > /var/lib/lxc/rfvmA/rootfs/root/run_rfclient.sh
echo "sleep 3" >> /var/lib/lxc/rfvmA/rootfs/root/run_rfclient.sh
echo "/etc/init.d/quagga start" >> /var/lib/lxc/rfvmA/rootfs/root/run_rfclient.sh
echo "/opt/rfclient/rfclient > /var/log/rfclient.log" >> /var/lib/lxc/rfvmA/rootfs/root/run_rfclient.sh

echo "#!/bin/sh" > /var/lib/lxc/rfvmB/rootfs/root/run_rfclient.sh
echo "sleep 3" >> /var/lib/lxc/rfvmB/rootfs/root/run_rfclient.sh
echo "/etc/init.d/quagga start" >> /var/lib/lxc/rfvmB/rootfs/root/run_rfclient.sh
echo "/opt/rfclient/rfclient > /var/log/rfclient.log" >> /var/lib/lxc/rfvmB/rootfs/root/run_rfclient.sh

echo "#!/bin/sh" > /var/lib/lxc/rfvmC/rootfs/root/run_rfclient.sh
echo "sleep 3" >> /var/lib/lxc/rfvmC/rootfs/root/run_rfclient.sh
echo "/etc/init.d/quagga start" >> /var/lib/lxc/rfvmC/rootfs/root/run_rfclient.sh
echo "/opt/rfclient/rfclient > /var/log/rfclient.log" >> /var/lib/lxc/rfvmC/rootfs/root/run_rfclient.sh

echo "#!/bin/sh" > /var/lib/lxc/rfvmD/rootfs/root/run_rfclient.sh
echo "sleep 3" >> /var/lib/lxc/rfvmD/rootfs/root/run_rfclient.sh
echo "/etc/init.d/quagga start" >> /var/lib/lxc/rfvmD/rootfs/root/run_rfclient.sh
echo "/opt/rfclient/rfclient > /var/log/rfclient.log" >> /var/lib/lxc/rfvmD/rootfs/root/run_rfclient.sh

chmod +x /var/lib/lxc/rfvmA/rootfs/root/run_rfclient.sh
chmod +x /var/lib/lxc/rfvmB/rootfs/root/run_rfclient.sh
chmod +x /var/lib/lxc/rfvmC/rootfs/root/run_rfclient.sh
chmod +x /var/lib/lxc/rfvmD/rootfs/root/run_rfclient.sh

echo_bold "-> Starting the virtual machines..."
lxc-start -n rfvmA -d
lxc-start -n rfvmB -d
lxc-start -n rfvmC -d
lxc-start -n rfvmD -d

#lxc-start -n h1 -d
#lxc-start -n h2 -d
#lxc-start -n h3 -d
#lxc-start -n h4 -d

echo_bold "WAIT FOR CONTAINERS TO RUN"
lxc-wait -n rfvmA -s RUNNING
lxc-wait -n rfvmB -s RUNNING
lxc-wait -n rfvmC -s RUNNING
lxc-wait -n rfvmD -s RUNNING

#lxc-wait -n h1 -s RUNNING
#lxc-wait -n h2 -s RUNNING
#lxc-wait -n h3 -s RUNNING
#lxc-wait -n h4 -s RUNNING
#
#echo "sleeping for 10 secs"
#sleep 10
#
echo_bold "-> Starting the controller and RFPRoxy..."
cd pox
./pox.py --no-cli log.level --=INFO topology openflow.topology openflow.discovery rfproxy rfstats &
cd -
wait_port_listen $CONTROLLER_PORT

echo_bold "-> Starting RFServer..."
./rfserver/rfserver.py rftest/rftest2config.csv &
#sleep 10
echo_bold "-> Starting the control plane network (dp0 VS)..."
ovs-vsctl add-br dp0
ovs-vsctl add-port dp0 rfvmA.1
ovs-vsctl add-port dp0 rfvmA.2
ovs-vsctl add-port dp0 rfvmA.3
ovs-vsctl add-port dp0 rfvmA.4
ovs-vsctl add-port dp0 rfvmB.1
ovs-vsctl add-port dp0 rfvmB.2
ovs-vsctl add-port dp0 rfvmB.3
ovs-vsctl add-port dp0 rfvmC.1
ovs-vsctl add-port dp0 rfvmC.2
ovs-vsctl add-port dp0 rfvmC.3
ovs-vsctl add-port dp0 rfvmD.1
ovs-vsctl add-port dp0 rfvmD.2
ovs-vsctl add-port dp0 rfvmD.3
ovs-vsctl add-port dp0 rfvmD.4
#echo_bold "-> wait for adding controller to dp0"
#sleep 5
echo_bold "-> adding controller to dp0"
ovs-vsctl set Bridge dp0 other-config:datapath-id=7266767372667673
ovs-vsctl set-controller dp0 tcp:127.0.0.1:$CONTROLLER_PORT


#ovs-vsctl add-br switchA
#ovs-vsctl add-br switchB
#ovs-vsctl add-br switchC
#ovs-vsctl add-br switchD
#
#ovs-vsctl add-port switchA h1.0
#ovs-vsctl add-port switchB h2.0
#ovs-vsctl add-port switchC h3.0
#ovs-vsctl add-port switchD h4.0
#
#
#ip link add name sa.2 type veth peer name sb.2
#ip link add name sb.3 type veth peer name sd.2
#ip link add name sc.2 type veth peer name sd.3
#ip link add name sa.3 type veth peer name sc.3
#ip link add name sa.4 type veth peer name sd.4
#
#ifconfig sa.2 up
#ifconfig sa.3 up
#ifconfig sa.4 up
#ifconfig sb.2 up
#ifconfig sb.3 up
#ifconfig sc.2 up
#ifconfig sc.3 up
#ifconfig sd.2 up
#ifconfig sd.3 up
#ifconfig sd.4 up
#
#ovs-vsctl add-port switchA sa.2
#ovs-vsctl add-port switchA sa.3
#ovs-vsctl add-port switchA sa.4
#
#ovs-vsctl add-port switchB sb.2
#ovs-vsctl add-port switchB sb.3
#
#ovs-vsctl add-port switchC sc.2
#ovs-vsctl add-port switchC sc.3
#
#ovs-vsctl add-port switchD sd.2
#ovs-vsctl add-port switchD sd.3
#ovs-vsctl add-port switchD sd.4
#
#
#echo_bold "Wait for h[1-4] to be running"
#lxc-wait -n h1 -s RUNNING
#lxc-wait -n h2 -s RUNNING
#lxc-wait -n h3 -s RUNNING
#lxc-wait -n h4 -s RUNNING
#
#sleep 10
#echo_bold "-> adding controller to switchA"
#
#ovs-vsctl set Bridge switchA other-config:datapath-id=0000000000000008
#ovs-vsctl set-controller switchA tcp:127.0.0.1:$CONTROLLER_PORT
#
#sleep 10
#echo_bold "-> adding controller to switchB"
#ovs-vsctl set Bridge switchB other-config:datapath-id=0000000000000007
#ovs-vsctl set-controller switchB tcp:127.0.0.1:$CONTROLLER_PORT
#
#sleep 10
#echo_bold "-> adding controller to switchC"
#ovs-vsctl set Bridge switchC other-config:datapath-id=0000000000000006
#ovs-vsctl set-controller switchC tcp:127.0.0.1:$CONTROLLER_PORT
#
#sleep 10
#echo_bold "-> adding controller to switchD"
#ovs-vsctl set Bridge switchD other-config:datapath-id=0000000000000005
#ovs-vsctl set-controller switchD tcp:127.0.0.1:$CONTROLLER_PORT
#
echo_bold "---"
echo_bold "This test is up and running."
#echo_bold "Start Mininet:"
#echo_bold "  $ mn --custom ~/mininet/custom/topo-4sw-4host.py --topo=rftopo"
#echo_bold "    --controller=remote --ip=ADDRESS --port=$CONTROLLER_PORT"
#echo_bold "Replace ADDRESS with the address of this host's interface connected "
#echo_bold "to the Mininet VM."
#echo_bold "Then try pinging everything:"
#echo_bold "  > pingall"
echo_bold "You can stop this test by pressing CTRL+C."
echo_bold "---"
wait

exit 0
